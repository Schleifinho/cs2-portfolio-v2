// <auto-generated />
using System;
using CSPortfolioAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CSPortfolioAPI.Migrations
{
    [DbContext(typeof(CSDbContext))]
    partial class CSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CSPortfolioAPI.Models.InventoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryEntries");
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("MarketHashName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MarketHashName")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.PriceHistory", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ItemId");

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("InventoryEntryId")
                        .HasColumnType("integer");

                    b.Property<double>("PriceHistory")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InventoryEntryId");

                    b.ToTable("Transaction");

                    b.HasDiscriminator().HasValue("Transaction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.Purchase", b =>
                {
                    b.HasBaseType("CSPortfolioAPI.Models.Transaction");

                    b.HasDiscriminator().HasValue("Purchase");
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.Sale", b =>
                {
                    b.HasBaseType("CSPortfolioAPI.Models.Transaction");

                    b.HasDiscriminator().HasValue("Sale");
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.InventoryEntry", b =>
                {
                    b.HasOne("CSPortfolioAPI.Models.Item", "Item")
                        .WithMany("InventoryEntries")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.PriceHistory", b =>
                {
                    b.HasOne("CSPortfolioAPI.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.Transaction", b =>
                {
                    b.HasOne("CSPortfolioAPI.Models.InventoryEntry", "InventoryEntry")
                        .WithMany("Transactions")
                        .HasForeignKey("InventoryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryEntry");
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.InventoryEntry", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CSPortfolioAPI.Models.Item", b =>
                {
                    b.Navigation("InventoryEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
